# -*- coding: utf-8 -*-
"""threshold_rsc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1huilPh7-zKHcfclnXRepGyKVxa4XpGMk
"""

import cv2
import argparse
import os

def contour_threshold(img, thresh = 0):
    img_grey = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    #get threshold image
    ret,thresh_img = cv2.threshold(img_grey, thresh, 255, cv2.THRESH_BINARY)
    #find contours
    contours, hierarchy = cv2.findContours(thresh_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    return contours

def find_rsc(img):
    count = 0
    cells = contour_threshold(img, 140)
    height = img.shape[0]
    width = img.shape[1]
    for cell in cells:
        x,y,w,h = cv2.boundingRect(cell)
        area = w*h
        if(area>700 and (area)<(width*height)):
            cropped_image = img[y:y+h, x:x+w]
            nucleoli = contour_threshold(cropped_image, 100)
            cv2.imwrite(os.path.join(cellDir,f'patch_{count}.jpg'), cropped_image)

            for nucleolus in nucleoli:
                x,y,w,h = cv2.boundingRect(nucleolus)
                if(w*h>200 and w*h<area):
                    cropped_image = cv2.rectangle(cropped_image,(x,y),(x+w,y+h),(0,255,0),2)
            # cv2.drawContours(cropped_image, contours, -1, (0,255,0), 3)
            cv2.imwrite(os.path.join(nucDir,f'patch_{count}.jpg'), cropped_image)
            count +=1

parser = argparse.ArgumentParser(description='PyTorch Unsupervised Segmentation')
parser.add_argument('--imagePath', default="./images/patch_position(64388_33704)_125_DoubleRSC.jpg", 
                    help='input image file name') # , required=True
parser.add_argument('--outputDir', default="output",  
                    help='output directory name')
args = parser.parse_args()

# Check if output directory exists, if not create it
if not os.path.exists(args.outputDir):
    os.mkdir(args.outputDir)

# Create Output Subdirectories
cellDir = os.path.join(args.outputDir,"cell")
nucDir = os.path.join(args.outputDir,"nucleolus")
if not os.path.exists(cellDir):
    os.mkdir(cellDir)
if not os.path.exists(nucDir):
    os.mkdir(nucDir)

# Check if image exists
if not os.path.exists(args.imagePath):
    raise Exception("The path to the input Image file does not exist")


patch = cv2.imread(args.imagePath)
patch = cv2.cvtColor(patch, cv2.COLOR_BGR2RGB)
cv2.imwrite(os.path.join(args.outputDir,"patch.jpg"), patch)
find_rsc(patch)